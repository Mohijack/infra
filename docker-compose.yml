services:

  # Init-Container für die Initialisierung der acme.json-Datei
  traefik-init:
    image: alpine:latest
    container_name: traefik-init
    restart: "no"
    volumes:
      - traefik_acme:/letsencrypt
    command: sh -c "touch /letsencrypt/acme.json && chmod 600 /letsencrypt/acme.json && echo 'acme.json initialized with permissions 600'"
    networks:
      - app_network

  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    depends_on:
      - traefik-init

    environment:
      # Cloudflare-Konfiguration für öffentliche Domains
      - CLOUDFLARE_EMAIL=${CF_API_EMAIL}
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - DOMAIN=${DOMAIN}
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.defaultrule=Host(`{{ normalize .Name }}.${DOMAIN}`)"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.delaybeforecheck=90"
      - "--certificatesresolvers.cloudflare.acme.email=${EMAIL}"
      - "--certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.websecure.forwardedHeaders.insecure=true"
      - "--serversTransport.insecureSkipVerify=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Direkter Zugriff auf das Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_acme:/letsencrypt
    networks:
      - app_network
    labels:
      - "traefik.enable=true"

      # Dashboard-Konfiguration gemäß offizieller Dokumentation
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=cloudflare"

      # Wildcard-Zertifikat für alle Subdomains
      - "traefik.http.routers.dashboard.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.dashboard.tls.domains[0].sans=${DOMAIN}"

      # Sicherheits-Middlewares
      - "traefik.http.middlewares.secureHeaders.headers.frameDeny=true"
      # SSLRedirect entfernt, da es veraltet ist und wir bereits eine Entrypoint-Umleitung verwenden
      - "traefik.http.middlewares.secureHeaders.headers.browserXssFilter=true"
      - "traefik.http.middlewares.secureHeaders.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.secureHeaders.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.secureHeaders.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.secureHeaders.headers.stsPreload=true"
      - "traefik.http.middlewares.secureHeaders.headers.stsSeconds=31536000"

      # Middleware für Cloudflare-Header
      - "traefik.http.middlewares.cloudflare-headers.headers.customrequestheaders.X-Forwarded-Proto=https"

      # Anwendung der Middlewares auf das Dashboard
      - "traefik.http.routers.dashboard.middlewares=secureHeaders,cloudflare-headers"

      # Direkter Zugriff auf das Dashboard über Port 8080
      - "traefik.http.routers.api.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
      - "traefik.http.routers.api.service=api@internal"

  db:
    image: postgres:15
    container_name: authentik-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    # Explizite Ports für die Datenbank, um sicherzustellen, dass sie erreichbar ist
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    container_name: authentik-redis
    restart: unless-stopped
    networks:
      - app_network
    # Explizite Ports für Redis, um sicherzustellen, dass es erreichbar ist
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  authentik:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      # Explizite Konfiguration für die Datenbankverbindung
      AUTHENTIK_POSTGRESQL__HOST: db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PORT: 5432
      # Explizite Konfiguration für die Redis-Verbindung
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PORT: 6379
      # Vollständige Datenbank-URL
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      AUTHENTIK_EMAIL__HOST: ${SMTP_HOST}
      AUTHENTIK_EMAIL__PORT: ${SMTP_PORT}
      AUTHENTIK_EMAIL__USERNAME: ${SMTP_USER}
      AUTHENTIK_EMAIL__PASSWORD: ${SMTP_PASSWORD}
      AUTHENTIK_PORT: 9000
      AUTHENTIK_PORT_HTTPS: 9443
      # Wichtig: Setze die korrekte externe URL
      AUTHENTIK_HOST: auth.${DOMAIN}
      # Bootstrap-Anmeldedaten für die Ersteinrichtung
      AUTHENTIK_BOOTSTRAP_TOKEN: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD}
      AUTHENTIK_BOOTSTRAP_EMAIL: ${AUTHENTIK_BOOTSTRAP_EMAIL}
      AUTHENTIK_BOOTSTRAP_USERNAME: ${AUTHENTIK_BOOTSTRAP_USERNAME}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_DISABLE_UPDATE_CHECK: "true"
    ports:
      - "9001:9000"  # HTTP port for Authentik
      - "9444:9443"  # HTTPS port for Authentik
    volumes:
      - authentik_media:/media
      - authentik_custom_templates:/templates
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      # Bei Cloudflare Zero Trust kann die TLS-Konfiguration anders sein
      - "traefik.http.routers.authentik.tls=true"
      - "traefik.http.routers.authentik.tls.certresolver=cloudflare"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.http.routers.authentik.middlewares=secureHeaders,cloudflare-headers"
    networks:
      - app_network

  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    depends_on:
      authentik:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      # Explizite Konfiguration für die Datenbankverbindung
      AUTHENTIK_POSTGRESQL__HOST: db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PORT: 5432
      # Explizite Konfiguration für die Redis-Verbindung
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PORT: 6379
      # Vollständige Datenbank-URL
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # Bootstrap-Anmeldedaten für die Ersteinrichtung
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD}
      AUTHENTIK_BOOTSTRAP_EMAIL: ${AUTHENTIK_BOOTSTRAP_EMAIL}
      AUTHENTIK_BOOTSTRAP_USERNAME: ${AUTHENTIK_BOOTSTRAP_USERNAME}
    # Keine Ports veröffentlichen für den Worker
    networks:
      - app_network

  # DNS-Server mit jpillora/dnsmasq
  dns:
    image: jpillora/dnsmasq
    container_name: dns
    restart: unless-stopped
    ports:
      - "5353:53/udp"
      - "5380:8080"
    environment:
      - TZ=Europe/Berlin
    command: |
      --log-queries
      --log-facility=-
      --cache-size=1000
      --server=8.8.8.8
      --server=8.8.4.4
      --address=/traefik.${DOMAIN}/${SERVER_IP}
      --address=/auth.${DOMAIN}/${SERVER_IP}
      --address=/dns.${DOMAIN}/${SERVER_IP}
      --webserver
      --webserver-port=8080
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dns.rule=Host(`dns.${DOMAIN}`)"
      - "traefik.http.routers.dns.entrypoints=websecure"
      - "traefik.http.routers.dns.tls=true"
      - "traefik.http.routers.dns.tls.certresolver=cloudflare"
      - "traefik.http.services.dns.loadbalancer.server.port=8080"
      - "traefik.http.routers.dns.middlewares=secureHeaders,cloudflare-headers"
volumes:
  db_data:
    driver: local
  authentik_media:
    driver: local
  authentik_custom_templates:
    driver: local
  traefik_acme:
    driver: local


# Definiere ein explizites Netzwerk für alle Container
networks:
  app_network:
    driver: bridge
