services:
  bind9:
    # Verwende ein einfacheres DNS-Image als Alternative zu bind9
    image: cytopia/bind:0.15
    container_name: bind9
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - DNS_FORWARDER=1.1.1.1,8.8.8.8
      # Definiere eine einfache DNS-Zone direkt in der Umgebungsvariable
      # Verwende die IP-Adresse des Proxmox-Hosts oder die IP der Portainer-VM/Container
      - DNS_A=auth.dasilvafelix.de=${SERVER_IP},traefik.dasilvafelix.de=${SERVER_IP}
    ports:
      - "1053:53/udp"
      - "1053:53/tcp"
    networks:
      - app_network
    # Hinzufügen von Labels für bessere Kompatibilität mit Portainer
    labels:
      - "traefik.enable=true"
      # Verwende das Standard-Netzwerk
      # - "traefik.docker.network=traefik"

  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Kommentiere die Umleitung aus, da Cloudflare Zero Trust dies übernimmt
      # - --entrypoints.web.http.redirections.entryPoint.to=websecure
      # - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge.delaybeforecheck=90
      - --certificatesresolvers.cloudflare.acme.email=${EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
      - --log.level=DEBUG
      # Zusätzliche Konfiguration für Cloudflare
      # Verwende das Standard-Netzwerk
      # - --providers.docker.network=traefik
      # Spezifische Konfiguration für Proxmox-Umgebung
      - --providers.docker.defaultrule=Host(`{{ normalize .Name }}.${DOMAIN}`)
      - --entrypoints.websecure.forwardedHeaders.insecure=true
      - --serversTransport.insecureSkipVerify=true
    environment:
      - CLOUDFLARE_EMAIL=${CF_API_EMAIL}
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/acme.json:/letsencrypt/acme.json
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      # Bei Cloudflare Zero Trust kann die TLS-Konfiguration anders sein
      - "traefik.http.routers.traefik-dashboard.tls=true"
      # - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth,cloudflare-headers"
      # Middleware für Cloudflare-Header
      - "traefik.http.middlewares.cloudflare-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/"

  db:
    image: postgres:15
    container_name: authentik-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    # Explizite Ports für die Datenbank, um sicherzustellen, dass sie erreichbar ist
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    container_name: authentik-redis
    restart: unless-stopped
    networks:
      - app_network
    # Explizite Ports für Redis, um sicherzustellen, dass es erreichbar ist
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  authentik:
    image: ghcr.io/goauthentik/server:2023.8.3
    container_name: authentik
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      # Explizite Konfiguration für die Datenbankverbindung
      AUTHENTIK_POSTGRESQL__HOST: db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PORT: 5432
      # Explizite Konfiguration für die Redis-Verbindung
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PORT: 6379
      # Vollständige Datenbank-URL
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      AUTHENTIK_EMAIL__HOST: ${SMTP_HOST}
      AUTHENTIK_EMAIL__PORT: ${SMTP_PORT}
      AUTHENTIK_EMAIL__USERNAME: ${SMTP_USER}
      AUTHENTIK_EMAIL__PASSWORD: ${SMTP_PASSWORD}
      AUTHENTIK_PORT: 9000
      AUTHENTIK_PORT_HTTPS: 9443
      # Wichtig: Setze die korrekte externe URL
      AUTHENTIK_HOST: auth.${DOMAIN}
      AUTHENTIK_BOOTSTRAP_TOKEN: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_DISABLE_UPDATE_CHECK: "true"
    ports:
      - "9001:9000"  # HTTP port for Authentik
      - "9444:9443"  # HTTPS port for Authentik
    volumes:
      - authentik_media:/media
      - authentik_custom_templates:/templates
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      # Bei Cloudflare Zero Trust kann die TLS-Konfiguration anders sein
      - "traefik.http.routers.authentik.tls=true"
      # - "traefik.http.routers.authentik.tls.certresolver=cloudflare"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.http.routers.authentik.middlewares=cloudflare-headers"
    networks:
      - app_network

  authentik-worker:
    image: ghcr.io/goauthentik/server:2023.8.3
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    depends_on:
      authentik:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      # Explizite Konfiguration für die Datenbankverbindung
      AUTHENTIK_POSTGRESQL__HOST: db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PORT: 5432
      # Explizite Konfiguration für die Redis-Verbindung
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PORT: 6379
      # Vollständige Datenbank-URL
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    networks:
      - app_network

volumes:
  db_data:
  authentik_media:
  authentik_custom_templates:

# Definiere ein explizites Netzwerk für alle Container
networks:
  app_network:
    driver: bridge
